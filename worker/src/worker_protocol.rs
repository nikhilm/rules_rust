// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/worker_protocol.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(PartialEq,Clone,Default)]
pub struct Input {
    // message fields
    pub path: ::std::string::String,
    pub digest: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Input {
    fn default() -> &'a Input {
        <Input as ::protobuf::Message>::default_instance()
    }
}

impl Input {
    pub fn new() -> Input {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // bytes digest = 2;


    pub fn get_digest(&self) -> &[u8] {
        &self.digest
    }
    pub fn clear_digest(&mut self) {
        self.digest.clear();
    }

    // Param is passed by value, moved
    pub fn set_digest(&mut self, v: ::std::vec::Vec<u8>) {
        self.digest = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_digest(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.digest
    }

    // Take field
    pub fn take_digest(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.digest, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Input {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.digest)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if !self.digest.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.digest);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if !self.digest.is_empty() {
            os.write_bytes(2, &self.digest)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Input {
        Input::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &Input| { &m.path },
                    |m: &mut Input| { &mut m.path },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "digest",
                    |m: &Input| { &m.digest },
                    |m: &mut Input| { &mut m.digest },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Input>(
                    "Input",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Input {
        static mut instance: ::protobuf::lazy::Lazy<Input> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Input,
        };
        unsafe {
            instance.get(Input::new)
        }
    }
}

impl ::protobuf::Clear for Input {
    fn clear(&mut self) {
        self.path.clear();
        self.digest.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Input {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Input {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WorkRequest {
    // message fields
    pub arguments: ::protobuf::RepeatedField<::std::string::String>,
    pub inputs: ::protobuf::RepeatedField<Input>,
    pub request_id: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WorkRequest {
    fn default() -> &'a WorkRequest {
        <WorkRequest as ::protobuf::Message>::default_instance()
    }
}

impl WorkRequest {
    pub fn new() -> WorkRequest {
        ::std::default::Default::default()
    }

    // repeated string arguments = 1;


    pub fn get_arguments(&self) -> &[::std::string::String] {
        &self.arguments
    }
    pub fn clear_arguments(&mut self) {
        self.arguments.clear();
    }

    // Param is passed by value, moved
    pub fn set_arguments(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.arguments = v;
    }

    // Mutable pointer to the field.
    pub fn mut_arguments(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.arguments
    }

    // Take field
    pub fn take_arguments(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.arguments, ::protobuf::RepeatedField::new())
    }

    // repeated .blaze.worker.Input inputs = 2;


    pub fn get_inputs(&self) -> &[Input] {
        &self.inputs
    }
    pub fn clear_inputs(&mut self) {
        self.inputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_inputs(&mut self, v: ::protobuf::RepeatedField<Input>) {
        self.inputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_inputs(&mut self) -> &mut ::protobuf::RepeatedField<Input> {
        &mut self.inputs
    }

    // Take field
    pub fn take_inputs(&mut self) -> ::protobuf::RepeatedField<Input> {
        ::std::mem::replace(&mut self.inputs, ::protobuf::RepeatedField::new())
    }

    // int32 request_id = 3;


    pub fn get_request_id(&self) -> i32 {
        self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: i32) {
        self.request_id = v;
    }
}

impl ::protobuf::Message for WorkRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.inputs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.arguments)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.inputs)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.request_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.arguments {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.inputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.request_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.request_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.arguments {
            os.write_string(1, &v)?;
        };
        for v in &self.inputs {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.request_id != 0 {
            os.write_int32(3, self.request_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WorkRequest {
        WorkRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "arguments",
                    |m: &WorkRequest| { &m.arguments },
                    |m: &mut WorkRequest| { &mut m.arguments },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Input>>(
                    "inputs",
                    |m: &WorkRequest| { &m.inputs },
                    |m: &mut WorkRequest| { &mut m.inputs },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "request_id",
                    |m: &WorkRequest| { &m.request_id },
                    |m: &mut WorkRequest| { &mut m.request_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WorkRequest>(
                    "WorkRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WorkRequest {
        static mut instance: ::protobuf::lazy::Lazy<WorkRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WorkRequest,
        };
        unsafe {
            instance.get(WorkRequest::new)
        }
    }
}

impl ::protobuf::Clear for WorkRequest {
    fn clear(&mut self) {
        self.arguments.clear();
        self.inputs.clear();
        self.request_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WorkRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorkRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WorkResponse {
    // message fields
    pub exit_code: i32,
    pub output: ::std::string::String,
    pub request_id: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WorkResponse {
    fn default() -> &'a WorkResponse {
        <WorkResponse as ::protobuf::Message>::default_instance()
    }
}

impl WorkResponse {
    pub fn new() -> WorkResponse {
        ::std::default::Default::default()
    }

    // int32 exit_code = 1;


    pub fn get_exit_code(&self) -> i32 {
        self.exit_code
    }
    pub fn clear_exit_code(&mut self) {
        self.exit_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_exit_code(&mut self, v: i32) {
        self.exit_code = v;
    }

    // string output = 2;


    pub fn get_output(&self) -> &str {
        &self.output
    }
    pub fn clear_output(&mut self) {
        self.output.clear();
    }

    // Param is passed by value, moved
    pub fn set_output(&mut self, v: ::std::string::String) {
        self.output = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output(&mut self) -> &mut ::std::string::String {
        &mut self.output
    }

    // Take field
    pub fn take_output(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.output, ::std::string::String::new())
    }

    // int32 request_id = 3;


    pub fn get_request_id(&self) -> i32 {
        self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: i32) {
        self.request_id = v;
    }
}

impl ::protobuf::Message for WorkResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.exit_code = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.output)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.request_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.exit_code != 0 {
            my_size += ::protobuf::rt::value_size(1, self.exit_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.output.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.output);
        }
        if self.request_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.request_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.exit_code != 0 {
            os.write_int32(1, self.exit_code)?;
        }
        if !self.output.is_empty() {
            os.write_string(2, &self.output)?;
        }
        if self.request_id != 0 {
            os.write_int32(3, self.request_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WorkResponse {
        WorkResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "exit_code",
                    |m: &WorkResponse| { &m.exit_code },
                    |m: &mut WorkResponse| { &mut m.exit_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "output",
                    |m: &WorkResponse| { &m.output },
                    |m: &mut WorkResponse| { &mut m.output },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "request_id",
                    |m: &WorkResponse| { &m.request_id },
                    |m: &mut WorkResponse| { &mut m.request_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WorkResponse>(
                    "WorkResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WorkResponse {
        static mut instance: ::protobuf::lazy::Lazy<WorkResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WorkResponse,
        };
        unsafe {
            instance.get(WorkResponse::new)
        }
    }
}

impl ::protobuf::Clear for WorkResponse {
    fn clear(&mut self) {
        self.exit_code = 0;
        self.output.clear();
        self.request_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WorkResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorkResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19src/worker_protocol.proto\x12\x0cblaze.worker\"3\n\x05Input\x12\
    \x12\n\x04path\x18\x01\x20\x01(\tR\x04path\x12\x16\n\x06digest\x18\x02\
    \x20\x01(\x0cR\x06digest\"w\n\x0bWorkRequest\x12\x1c\n\targuments\x18\
    \x01\x20\x03(\tR\targuments\x12+\n\x06inputs\x18\x02\x20\x03(\x0b2\x13.b\
    laze.worker.InputR\x06inputs\x12\x1d\n\nrequest_id\x18\x03\x20\x01(\x05R\
    \trequestId\"b\n\x0cWorkResponse\x12\x1b\n\texit_code\x18\x01\x20\x01(\
    \x05R\x08exitCode\x12\x16\n\x06output\x18\x02\x20\x01(\tR\x06output\x12\
    \x1d\n\nrequest_id\x18\x03\x20\x01(\x05R\trequestIdB&\n$com.google.devto\
    ols.build.lib.workerJ\xf6\x12\n\x06\x12\x04\x0e\0=\x01\n\xd8\x04\n\x01\
    \x0c\x12\x03\x0e\0\x122\xcd\x04\x20Copyright\x202015\x20The\x20Bazel\x20\
    Authors.\x20All\x20rights\x20reserved.\n\n\x20Licensed\x20under\x20the\
    \x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20y\
    ou\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\
    \x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\
    \x20the\x20License\x20at\n\n\x20\x20\x20\x20http://www.apache.org/licens\
    es/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20o\
    r\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20unde\
    r\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20\
    BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KI\
    ND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20License\
    \x20for\x20the\x20specific\x20language\x20governing\x20permissions\x20an\
    d\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\
    \x10\0\x15\n\x08\n\x01\x08\x12\x03\x12\0=\n\t\n\x02\x08\x01\x12\x03\x12\
    \0=\n\x1c\n\x02\x04\0\x12\x04\x15\0\x1f\x01\x1a\x10\x20An\x20input\x20fi\
    le.\n\n\n\n\x03\x04\0\x01\x12\x03\x15\x08\r\n\xf7\x01\n\x04\x04\0\x02\0\
    \x12\x03\x1a\x02\x12\x1a\xe9\x01\x20The\x20path\x20in\x20the\x20file\x20\
    system\x20where\x20to\x20read\x20this\x20input\x20artifact\x20from.\x20T\
    his\x20is\n\x20either\x20a\x20path\x20relative\x20to\x20the\x20execution\
    \x20root\x20(the\x20worker\x20process\x20is\n\x20launched\x20with\x20the\
    \x20working\x20directory\x20set\x20to\x20the\x20execution\x20root),\x20o\
    r\x20an\n\x20absolute\x20path.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1a\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1a\t\r\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x1a\x10\x11\n\x8c\x01\n\x04\x04\0\x02\x01\x12\x03\x1e\
    \x02\x13\x1a\x7f\x20A\x20hash-value\x20of\x20the\x20contents.\x20The\x20\
    format\x20of\x20the\x20contents\x20is\x20unspecified\x20and\n\x20the\x20\
    digest\x20should\x20be\x20treated\x20as\x20an\x20opaque\x20token.\n\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1e\x02\x07\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x1e\x08\x0e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1e\
    \x11\x12\nP\n\x02\x04\x01\x12\x04\"\0,\x01\x1aD\x20This\x20represents\
    \x20a\x20single\x20work\x20unit\x20that\x20Blaze\x20sends\x20to\x20the\
    \x20worker.\n\n\n\n\x03\x04\x01\x01\x12\x03\"\x08\x13\n\x0b\n\x04\x04\
    \x01\x02\0\x12\x03#\x02\x20\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03#\x02\n\
    \n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03#\x0b\x11\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03#\x12\x1b\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03#\x1e\x1f\n\
    _\n\x04\x04\x01\x02\x01\x12\x03'\x02\x1c\x1aR\x20The\x20inputs\x20that\
    \x20the\x20worker\x20is\x20allowed\x20to\x20read\x20during\x20execution\
    \x20of\x20this\n\x20request.\n\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03'\
    \x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03'\x0b\x10\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03'\x11\x17\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03'\x1a\x1b\n\x90\x01\n\x04\x04\x01\x02\x02\x12\x03+\x02\x17\x1a\x82\
    \x01\x20To\x20support\x20multiplex\x20worker,\x20each\x20WorkRequest\x20\
    must\x20have\x20an\x20unique\x20ID.\x20This\n\x20ID\x20should\x20be\x20a\
    ttached\x20unchanged\x20to\x20the\x20WorkResponse.\n\n\x0c\n\x05\x04\x01\
    \x02\x02\x05\x12\x03+\x02\x07\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03+\
    \x08\x12\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03+\x15\x16\nk\n\x02\x04\
    \x02\x12\x040\0=\x01\x1a_\x20The\x20worker\x20sends\x20this\x20message\
    \x20to\x20Blaze\x20when\x20it\x20finished\x20its\x20work\x20on\x20the\n\
    \x20WorkRequest\x20message.\n\n\n\n\x03\x04\x02\x01\x12\x030\x08\x14\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x031\x02\x16\n\x0c\n\x05\x04\x02\x02\0\x05\
    \x12\x031\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x031\x08\x11\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x031\x14\x15\n\xd5\x01\n\x04\x04\x02\x02\x01\
    \x12\x036\x02\x14\x1a\xc7\x01\x20This\x20is\x20printed\x20to\x20the\x20u\
    ser\x20after\x20the\x20WorkResponse\x20has\x20been\x20received\x20and\
    \x20is\n\x20supposed\x20to\x20contain\x20compiler\x20warnings\x20/\x20er\
    rors\x20etc.\x20-\x20thus\x20we'll\x20use\x20a\n\x20string\x20type\x20he\
    re,\x20which\x20gives\x20us\x20UTF-8\x20encoding.\n\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x036\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x036\t\
    \x0f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x036\x12\x13\n\x95\x02\n\x04\
    \x04\x02\x02\x02\x12\x03<\x02\x17\x1a\x87\x02\x20To\x20support\x20multip\
    lex\x20worker,\x20each\x20WorkResponse\x20must\x20have\x20an\x20unique\
    \x20ID.\n\x20Since\x20worker\x20processes\x20which\x20support\x20multipl\
    ex\x20worker\x20will\x20handle\x20multiple\n\x20WorkRequests\x20in\x20pa\
    rallel,\x20this\x20ID\x20will\x20be\x20used\x20to\x20determined\x20which\
    \n\x20WorkerProxy\x20does\x20this\x20WorkResponse\x20belong\x20to.\n\n\
    \x0c\n\x05\x04\x02\x02\x02\x05\x12\x03<\x02\x07\n\x0c\n\x05\x04\x02\x02\
    \x02\x01\x12\x03<\x08\x12\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03<\x15\
    \x16b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
